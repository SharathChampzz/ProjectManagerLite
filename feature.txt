
#1. Only the user who created task should be able to close it.
#2. Anyone else can change the status from opened to fixed.
#3. If the MR is in state of "Fixed" reminder will be sent to creator to validate and "Close" the issue.
#4. Anyone can set the criticality of the issue, based on criticality, reminder emails will be sent. 1 hr/day/week.
#5. 

Email Reader:
    Wake up every 5 mins to check if there are any emails --  We dont have email listeners setup for now -- Push Notification is not on free tier
    Read email => Extract Thread ID => Query WS if thread id already exists and get the task ID associated with it => Decide POST / PUT
    During POST => Send all the essential details in Payload
    During PUT => Update email html content and make sure modified time is set.

API Requirements:
#1. Create Task - No Security - Anyone who is authenticated can create task
    Should support File Upload - Email HTML fill be added

    POST: /tasks
    Payload:
        {
            'creator_email': '',
            'assigned_to': '',
            'subject': '',
            'thread_id': '',
            'latest_message_id': '',
            'html_file': ''
        }
        # default values: criticality: medium, status: open

#2. GET Task - Task with details of criticality, status and history of sent reminders
    GET: /tasks/{taskid}
    Enhancement: Story history of email schedule

#3. Modify Task
    Update criticality - No Security (Because we dont have data on who are all present in organization)
    Status:
    Mark as Fixed - No Security (Anyone can do this, because at the end. The one who reported the issue, will reminder to validate and set the right status)
    Mark as Opened - Anyone
    Mark as Closed - Only the issue creator can do
    Enhancement - Update Email Content too - replace html
    Update Latest Message ID and Thread ID -- Needed to send emails
    Update Assigned to -- Anyone can do this -- Email should be sent saying -- "You have been Assigned this issue, Please check"

    PUT: /tasks/{taskid}
    Payload:
        {
            'creator_email': '',
            'assigned_to': '',
            'subject': '',
            'thread_id': '',
            'latest_message_id': '',
            'html_file': ''
        }


#4. Delete Task - Supported only for admin - Only cleanup irrelavant tasks
    DELETE: /tasks/{taskid}

#5. GET All Tasks 
    GET: /tasks

    - Task with title, Creator, Assigned to, last reminder time, criticality, current issue status, MessageID
    - Get the task based on thread id
    - Should support param - status and criticality and negation parms like ("not" closed, "not" fixed)
    - Enhancement - param should support and | or logic

Scheduler Task:
Thread should wakeup every 30 mins. (So the restriction is, Email sending cannot be less than 30 mins even if it is critical)
    GET All Tasks that are not closed => Iterate => Read criticality => Last reminder sent time => If reminder needs to be sent => Read message ID => Add the task to email sending queue (If the status is Fixed)
Redis/Celery or any alternative should be used here - 
    So that if email sender is down, It can pick up this later without loosing email. Last email sent time should be updated here.
    Before sending out email, fetch issue details and validate the last email send time. To avoid sending multiple emails within shorttime. (Handling scheduler down for long time and possibly duplicate emails waiting in queue.)


